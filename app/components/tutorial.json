{
    "example1": {
      "explanation": "### Basic Outline\n\nThis example demonstrates the most basic use of the `outline` property.  The `outline` is a line drawn outside the border of an element.  It's similar to a border, but doesn't take up any space, and isn't part of the box model dimensions.\n\n`outline: width style color;`\n\n- `width`: The thickness of the outline. Common values are `thin`, `medium`, `thick`, or a specific length like `1px`. (required)\n- `style`: The style of the outline. Common values are `solid`, `dashed`, `dotted`, `double`, `groove`, `ridge`, `inset`, `outset`. (required)\n- `color`: The color of the outline. Can be any valid CSS color value. (required)\n\nThe outline appears *outside* the border. Unlike a border, an outline doesn't affect an element's dimensions or position.  It's primarily used for visual emphasis, such as to indicate focus.\n\nThis example focuses on a `solid` outline.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n    <div class=\"box\">This is a box with an outline.</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n  \n  /* Adding a solid red outline */\n  outline: 2px solid red;\n}",
      "javascript": ""
    },
    "example2": {
      "explanation": "### Outline Styles\n\nThis example demonstrates different outline styles. We'll examine `dashed`, `dotted`, and `double` outline styles. Remember the basic syntax:\n\n`outline: width style color;`\n\n- `dashed`: The outline appears as a series of dashes.\n- `dotted`: The outline appears as a series of dots.\n- `double`: The outline appears as two parallel lines.\n\nThe key thing is that the outline *does not* affect the layout of other elements. It floats above them.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n  <div class=\"box dashed\">Dashed Outline</div>\n  <div class=\"box dotted\">Dotted Outline</div>\n  <div class=\"box double\">Double Outline</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px; /* Space between the boxes */\n}\n\n/* Basic styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n}\n\n/* Dashed outline style */\n.dashed {\n  outline: 2px dashed blue;\n}\n\n/* Dotted outline style */\n.dotted {\n  outline: 2px dotted green;\n}\n\n/* Double outline style */\n.double {\n  outline: 5px double purple;\n}",
      "javascript": ""
    },
    "example3": {
      "explanation": "### Outline Width\n\nThis example demonstrates setting the `outline-width` property. `outline-width` controls the thickness of the outline. You can use keywords like `thin`, `medium`, and `thick`, or specify an exact length in pixels, ems, rems, etc.\n\nHere we demonstrate `thin`, `medium`, `thick` and a pixel value. Remember the outline sits outside the border and doesn't affect layout.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n  <div class=\"box thin\">Thin Outline</div>\n  <div class=\"box medium\">Medium Outline</div>\n  <div class=\"box thick\">Thick Outline</div>\n  <div class=\"box pixel\">4px Outline</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px; /* Space between the boxes */\n}\n\n/* Basic styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n  outline-style: solid; /* Important: outline-style must be set */\n  outline-color: black;\n}\n\n/* Thin outline width */\n.thin {\n  outline-width: thin;\n}\n\n/* Medium outline width */\n.medium {\n  outline-width: medium;\n}\n\n/* Thick outline width */\n.thick {\n  outline-width: thick;\n}\n\n/* Pixel outline width */\n.pixel {\n  outline-width: 4px;\n}",
      "javascript": ""
    },
    "example4": {
      "explanation": "### Outline Color\n\nThis example demonstrates setting the `outline-color` property. You can use any valid CSS color value, such as named colors, hexadecimal codes, RGB, RGBA, HSL, or HSLA.\n\nRemember that `outline-style` must be set for the `outline-color` to be visible.  If you only define `outline-color`, nothing will appear. If you define a single `outline` property with the width, style and color, the `outline-style` is automatically set.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n  <div class=\"box red\">Red Outline</div>\n  <div class=\"box hex\">Hex Outline</div>\n  <div class=\"box rgba\">RGBA Outline</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px; /* Space between the boxes */\n}\n\n/* Basic styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n  outline-style: solid; /* Important: outline-style must be set */\n  outline-width: 2px;\n}\n\n/* Red outline color */\n.red {\n  outline-color: red;\n}\n\n/* Hex outline color */\n.hex {\n  outline-color: #00FF00; /* Green */\n}\n\n/* RGBA outline color (semi-transparent) */\n.rgba {\n  outline-color: rgba(0, 0, 255, 0.5); /* Blue with 50% transparency */\n}",
      "javascript": ""
    },
    "example5": {
      "explanation": "### Outline Offset\n\nThis example demonstrates using the `outline-offset` property. `outline-offset` specifies the distance between an outline and the edge of an element/border.  It allows you to create a gap between the outline and the element.\n\n`outline-offset` takes a length value (e.g., pixels, ems, rems). Positive values move the outline *away* from the element, while negative values move it *towards* the element (potentially overlapping the border).",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n  <div class=\"box positive\">Positive Offset</div>\n  <div class=\"box negative\">Negative Offset</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px; /* Space between the boxes */\n}\n\n/* Basic styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n  outline: 2px solid black; /* shorthand for setting all at once*/\n}\n\n/* Positive outline offset */\n.positive {\n  outline-offset: 10px;\n}\n\n/* Negative outline offset */\n.negative {\n  outline-offset: -5px;\n}",
      "javascript": ""
    },
    "example6": {
      "explanation": "### Outline and Focus\n\nOutlines are frequently used to indicate that an element has focus (e.g., when a user tabs to an input field). This example demonstrates using the `:focus` pseudo-class to add an outline when an input element receives focus.  This provides visual feedback to the user.\n\nThe default outline for focus is often browser-specific and can be visually unappealing, so it's a good practice to customize it.",
      "html": "<!-- A simple div element containing an input field -->\n<div class=\"container\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name\">\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\n/* Styling for the input field */\ninput[type=\"text\"] {\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 200px;\n}\n\n/* Style the input when it's focused */\ninput[type=\"text\"]:focus {\n  outline: 2px solid blue; /* Custom focus outline */\n  border-color: blue; /* Change the border color as well for more emphasis */\n}",
      "javascript": ""
    },
    "example7": {
      "explanation": "### Removing the Default Outline on Focus\n\nBrowsers often provide a default outline when an element receives focus. While this is helpful for accessibility, it can sometimes clash with the design of your website.  This example demonstrates how to remove the default outline and replace it with a custom one. This is achieved by setting `outline: none;` on the focused element.\n\n**Important**: It's crucial to provide an alternative visual indicator of focus when removing the default outline to maintain accessibility.  Simply removing the outline without replacement harms usability for users who rely on it.",
      "html": "<!-- A simple div element containing a button -->\n<div class=\"container\">\n  <button>Click Me</button>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the button */\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n/* Remove default outline and add a custom one on focus */\nbutton:focus {\n  outline: none; /* Remove the default outline */\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Add a box-shadow as a focus indicator */\n}",
      "javascript": ""
    },
    "example8": {
      "explanation": "### Outline on Hover\n\nOutlines can also be used to provide visual feedback on hover. This example demonstrates adding an outline when the mouse hovers over a button. This gives the user a visual cue that the element is interactive.\n\nThis uses the `:hover` pseudo-class to trigger the outline change.",
      "html": "<!-- A simple div element containing a button -->\n<div class=\"container\">\n  <button>Hover Over Me</button>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the button */\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n/* Add outline on hover */\nbutton:hover {\n  outline: 2px solid darkgreen;\n}",
      "javascript": ""
    },
    "example9": {
      "explanation": "### Outline vs. Border\n\nThis example highlights the key difference between `outline` and `border`.  The most important difference is that the `border` contributes to the element's dimensions (and can affect layout), while the `outline` does *not*.  The outline is drawn outside of the border and doesn't take up space.\n\nHere, we'll see how adding a border will affect the positioning of the second box element, but the outline will not.",
      "html": "<!-- Two div elements side by side -->\n<div class=\"container\">\n  <div class=\"box border-example\">Border Example</div>\n  <div class=\"box outline-example\">Outline Example</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: space-around; /* Distribute elements evenly */\n  align-items: center;\n}\n\n/* Basic styling for the box */\n.box {\n  width: 150px;\n  height: 80px;\n  background-color: #f0f0f0;\n  text-align: center;\n  padding: 10px;\n}\n\n/* Border Example: Adding a border will push the element's contents inwards */\n.border-example {\n  border: 10px solid red;\n}\n\n/* Outline Example: Adding an outline does not affect the element's layout */\n.outline-example {\n  outline: 10px solid blue;\n}",
      "javascript": ""
    },
    "example10": {
      "explanation": "### Animating Outline Properties\n\nOutlines can be animated using CSS transitions and animations. This example demonstrates animating the `outline-color` property on hover.  This can add subtle, engaging visual effects to your website.\n\nKeep in mind that `outline-style` must be set before you can animate `outline-color` effectively.",
      "html": "<!-- A simple div element containing a button -->\n<div class=\"container\">\n  <button>Animate Me!</button>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the button */\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n  outline-style: solid; /* Important: outline-style must be set */\n  outline-color: transparent; /* Start with a transparent outline */\n  transition: outline-color 0.3s ease; /* Add a transition for smooth animation */\n}\n\n/* Animate the outline color on hover */\nbutton:hover {\n  outline-color: darkgreen;\n}",
      "javascript": ""
    },
    "example11": {
      "explanation": "### Multiple Outlines using `box-shadow`\n\nAlthough CSS `outline` property only allows for a single outline, you can simulate multiple outlines using the `box-shadow` property. The `box-shadow` property can create multiple shadows that appear as outlines, especially when the `blur-radius` is set to 0. Note that `box-shadow` also doesn't affect the element's layout, just like `outline`.\n\nThis example demonstrates creating two outlines using the `box-shadow` property.  The first box-shadow simulates the innermost outline, and the second box-shadow simulates the outermost outline.  The key is setting the blur radius to 0 to create a sharp line.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n    <div class=\"box\">Multiple Outlines</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n\n  /* Simulating multiple outlines using box-shadow */\n  box-shadow: 0 0 0 3px red, 0 0 0 6px blue;\n  /*\n  The first value (0 0 0 3px red) creates a red shadow with no horizontal offset, no vertical offset, no blur, and a spread of 3px (acting as the inner outline).\n  The second value (0 0 0 6px blue) creates a blue shadow with no offset, no blur, and a spread of 6px (acting as the outer outline).\n  */\n}",
      "javascript": ""
    },
     "example12": {
      "explanation": "### Combining Outline and Box-shadow for emphasis \n\nThis example combines both `outline` and `box-shadow` to achieve a more visually prominent effect. We use the `outline` to define a primary visual boundary and the `box-shadow` to create a subtle depth or glow effect.  This combination is especially effective for interactive elements like buttons or call-to-action sections.",
      "html": "<!-- A simple div element -->\n<div class=\"container\">\n    <div class=\"box\">Combined Effect</div>\n</div>",
      "css": "/* Styling for the container */\n.container {\n  width: 99%;\n  height: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Styling for the box */\n.box {\n  width: 200px;\n  height: 100px;\n  background-color: #f0f0f0;\n  border: 1px solid black;\n  padding: 10px;\n  text-align: center;\n\n  /* Applying outline and box-shadow */\n  outline: 2px solid green;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n  /*  The box-shadow adds a blurred shadow around the element, creating a depth effect. */\n}",
      "javascript": ""
    },
    "example13": {
      "explanation": "### Introduction to CSS Grid\n\nCSS Grid Layout is a two-dimensional layout system designed to handle both rows and columns. This example demonstrates the basic setup of a grid container and grid items.\n\n*   **`display: grid;`**: Activates grid layout\n*   **`grid-template-columns`**: Defines the columns of the grid\n*   **`grid-template-rows`**: Defines the rows of the grid",
      "html": "<div class=\"grid-container\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n  <div class=\"grid-item\">5</div>\n  <div class=\"grid-item\">6</div>\n</div>",
      "css": "/* Grid container styles */\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr; /* Three equal-width columns */\n  grid-template-rows: 100px 100px; /* Two rows of 100px each */\n  gap: 10px; /* Space between grid items */\n  padding: 20px;\n  background-color: #f0f0f0;\n}\n\n/* Grid item styles */\n.grid-item {\n  background-color: #3498db;\n  color: white;\n  padding: 20px;\n  text-align: center;\n  font-size: 24px;\n  border-radius: 5px;\n}",
      "javascript": ""
    },
    "example14": {
      "explanation": "### Grid Gap and Alignment\n\nThis example shows how to control spacing between grid items and align them within their grid areas.\n\n*   **`gap`**: Sets spacing between grid items\n*   **`justify-items`**: Aligns items horizontally within their grid areas\n*   **`align-items`**: Aligns items vertically within their grid areas",
      "html": "<div class=\"grid-container\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n</div>",
      "css": ".grid-container {\n  display: grid;\n  grid-template-columns: repeat(2, 150px); /* Two columns of 150px each */\n  grid-template-rows: repeat(2, 150px); /* Two rows of 150px each */\n  gap: 20px; /* Space between items */\n  justify-items: center; /* Center items horizontally */\n  align-items: center; /* Center items vertically */\n  padding: 20px;\n  background-color: #f0f0f0;\n}\n\n.grid-item {\n  background-color: #e74c3c;\n  color: white;\n  /* Make items smaller than their grid areas to show alignment */\n  width: 100px;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  border-radius: 5px;\n}",
      "javascript": ""
    },
    "example15": {
      "explanation": "### Grid Areas\n\nGrid areas allow you to create named template areas for your grid layout. This makes it easier to create complex layouts and rearrange them using media queries.\n\n*   **`grid-template-areas`**: Defines named grid areas\n*   **`grid-area`**: Assigns an item to a named grid area",
      "html": "<div class=\"grid-container\">\n  <header class=\"grid-item\">Header</header>\n  <nav class=\"grid-item\">Nav</nav>\n  <main class=\"grid-item\">Main Content</main>\n  <aside class=\"grid-item\">Sidebar</aside>\n  <footer class=\"grid-item\">Footer</footer>\n</div>",
      "css": ".grid-container {\n  display: grid;\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header header header\"\n    \"nav main aside\"\n    \"footer footer footer\";\n  gap: 10px;\n  padding: 20px;\n  background-color: #f0f0f0;\n  height: 400px;\n}\n\n.grid-item {\n  background-color: #2ecc71;\n  color: white;\n  padding: 20px;\n  text-align: center;\n  border-radius: 5px;\n}\n\nheader { grid-area: header; }\nnav { grid-area: nav; }\nmain { grid-area: main; }\naside { grid-area: aside; }\nfooter { grid-area: footer; }",
      "javascript": ""
    },
    "example16": {
      "explanation": "### Grid Lines and Spanning\n\nGrid items can span multiple rows and columns using line-based placement. Grid lines are numbered starting from 1.\n\n*   **`grid-column: start / end`**: Specifies which column lines the item should start and end at\n*   **`grid-row: start / end`**: Specifies which row lines the item should start and end at",
      "html": "<div class=\"grid-container\">\n  <div class=\"grid-item item1\">1</div>\n  <div class=\"grid-item item2\">2</div>\n  <div class=\"grid-item item3\">3</div>\n  <div class=\"grid-item item4\">4</div>",
      "css": ".grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 100px);\n  gap: 10px;\n  padding: 20px;\n  background-color: #f0f0f0;\n}\n\n.grid-item {\n  background-color: #9b59b6;\n  color: white;\n  padding: 20px;\n  text-align: center;\n  font-size: 24px;\n  border-radius: 5px;\n}\n\n/* Item spanning examples */\n.item1 {\n  grid-column: 1 / 3; /* Span from line 1 to 3 (2 columns) */\n  grid-row: 1 / 2; /* Stay in first row */\n}\n\n.item2 {\n  grid-column: 3 / 4; /* Take the last column */\n  grid-row: 1 / 3; /* Span both rows */\n}",
      "javascript": ""
    }
  }